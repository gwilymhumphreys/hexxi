// Generated by CoffeeScript 1.9.3
(function() {
  var Context, SelectContext, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Context = require('./context');

  module.exports = SelectContext = (function(superClass) {
    extend(SelectContext, superClass);

    function SelectContext() {
      this.select = bind(this.select, this);
      this.deactivate = bind(this.deactivate, this);
      this.onEntityCreated = bind(this.onEntityCreated, this);
      this.activate = bind(this.activate, this);
      return SelectContext.__super__.constructor.apply(this, arguments);
    }

    SelectContext.prototype._name = 'select';

    SelectContext.prototype.activate = function() {
      var entity, i, len, ref, results;
      this.active = true;
      this.entities = this.engine.entitiesByComponent('selectable');
      ref = this.entities;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        entity = ref[i];
        results.push(entity.on('click', this.select));
      }
      return results;
    };

    SelectContext.prototype.onEntityCreated = function(entity) {
      if (!this.active) {
        return;
      }
      this.entities.push(entity);
      return entity.on('click', this.select);
    };

    SelectContext.prototype.deactivate = function() {
      var entity, i, len, ref, results;
      this.active = false;
      ref = this.entities;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        entity = ref[i];
        results.push(entity.off('click', this.select));
      }
      return results;
    };

    SelectContext.prototype.select = function(entity, event) {
      if (!this.engine.started) {
        return;
      }
      if (!this.engine.getSystem('teams').isAlly(entity)) {
        return;
      }
      this.engine.getSystem('selectables').select(entity);
      return this.engine.getSystem('input').setContext('selected', entity);
    };

    return SelectContext;

  })(Context);

}).call(this);
