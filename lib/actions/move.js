// Generated by CoffeeScript 1.7.1
(function() {
  var Action, Engine, HIT_THRESHOLD, Move, tweene, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  Action = require('./action');

  Engine = require('../engine/engine');

  tweene = require('tween');

  HIT_THRESHOLD = 0.01;

  module.exports = Move = (function(_super) {
    __extends(Move, _super);

    function Move() {
      this._toTarget = __bind(this._toTarget, this);
      this._updatePosition = __bind(this._updatePosition, this);
      this._reachedTarget = __bind(this._reachedTarget, this);
      this._endOrNext = __bind(this._endOrNext, this);
      this.update = __bind(this.update, this);
      Move.__super__.constructor.apply(this, arguments);
      if (!this.entity) {
        throw new Error('Move action missing entity');
      }
      if (!this.path) {
        throw new Error('Move action missing path');
      }
    }

    Move.prototype.update = function() {
      this._endOrNext();
      if (this.complete) {
        return;
      }
      return this._updatePosition(this.entity, this.target);
    };

    Move.prototype._endOrNext = function() {
      var target;
      if (!this.complete && !this.target || this._reachedTarget()) {
        if (target = this.path.pop()) {
          console.log('newtarget', target);
          return this.target = this._toTarget(target);
        } else {
          console.log('notarget', target);
          return this.complete = true;
        }
      }
    };

    Move.prototype._reachedTarget = function() {
      return Math.abs(this.entity.position.x - this.target.position.x) < HIT_THRESHOLD && Math.abs(this.entity.position.y - this.target.position.y) < HIT_THRESHOLD;
    };

    Move.prototype._updatePosition = function(entity, target) {
      var dx, dy;
      dx = (target.position.x - entity.position.x) * 0.1;
      dy = (target.position.y - entity.position.y) * 0.1;
      entity.position.x += dx;
      return entity.position.y += dy;
    };

    Move.prototype._toTarget = function(hex_position) {
      var pixel_coords;
      if (hex_position.position) {
        return hex_position;
      }
      pixel_coords = Engine.getSystem('hex_grid').coordsToPixel(hex_position);
      return {
        position: pixel_coords,
        hex_position: hex_position
      };
    };

    return Move;

  })(Action);

}).call(this);
