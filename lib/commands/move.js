// Generated by CoffeeScript 1.9.3
(function() {
  var Command, MoveCommand, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Command = require('./command');

  module.exports = MoveCommand = (function(superClass) {
    extend(MoveCommand, superClass);

    function MoveCommand() {
      this.toJSON = bind(this.toJSON, this);
      this.execute = bind(this.execute, this);
      return MoveCommand.__super__.constructor.apply(this, arguments);
    }

    MoveCommand.prototype._name = 'move';

    MoveCommand.prototype.execute = function() {
      this.engine.getSystem('hex_grid').hexPathMove(this.entity, this.path);
      return this.engine.emit('command', this);
    };

    MoveCommand.prototype.toJSON = function() {
      return {
        command: this._name,
        data: {
          entity: this.entity.id,
          path: this.path
        }
      };
    };

    return MoveCommand;

  })(Command);

}).call(this);
