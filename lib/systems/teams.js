// Generated by CoffeeScript 1.9.3
(function() {
  var System, TeamsSystem, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  System = require('./system');

  module.exports = TeamsSystem = (function(superClass) {
    extend(TeamsSystem, superClass);

    function TeamsSystem() {
      this.isEnemy = bind(this.isEnemy, this);
      this.isAlly = bind(this.isAlly, this);
      this.localTeam = bind(this.localTeam, this);
      this.localIsActive = bind(this.localIsActive, this);
      this.activeUserId = bind(this.activeUserId, this);
      this.activeTeam = bind(this.activeTeam, this);
      this.createTurnOrder = bind(this.createTurnOrder, this);
      this.activate = bind(this.activate, this);
      this.nextTeam = bind(this.nextTeam, this);
      this.setLocalTeam = bind(this.setLocalTeam, this);
      this.startingTeam = bind(this.startingTeam, this);
      this.next = bind(this.next, this);
      this.onEntityCreated = bind(this.onEntityCreated, this);
      this.init = bind(this.init, this);
      return TeamsSystem.__super__.constructor.apply(this, arguments);
    }

    TeamsSystem.prototype._name = 'teams';

    TeamsSystem.prototype.init = function() {
      TeamsSystem.__super__.init.apply(this, arguments);
      return window.teams = this;
    };

    TeamsSystem.prototype.onEntityCreated = function(entity) {
      if (!entity.hasComponent('team')) {
        return;
      }
      this.entities.push(entity);
      return this.createTurnOrder();
    };

    TeamsSystem.prototype.next = function() {
      return this.activate(this.nextTeam());
    };

    TeamsSystem.prototype.startingTeam = function() {
      return this.ordered_teams[0];
    };

    TeamsSystem.prototype.setLocalTeam = function(team_id) {
      var ref, team, user_id;
      user_id = (ref = this.engine.getSystem('users').localUser()) != null ? ref.id : void 0;
      console.log('You are player', team_id);
      team = this.entities[--team_id];
      return team.user_id = user_id;
    };

    TeamsSystem.prototype.nextTeam = function() {
      var next_index, ref;
      if (!this.ordered_teams) {
        return;
      }
      next_index = this.activeTeam() ? ((ref = this.activeTeam()) != null ? ref.team.turn_index : void 0) + 1 : 0;
      if (!next_index || next_index >= this.ordered_teams.length) {
        next_index = 0;
      }
      return this.ordered_teams[next_index];
    };

    TeamsSystem.prototype.activate = function(team) {
      var ref;
      console.log('activating team', team);
      if (!team.id) {
        team = this.entityById(team);
      }
      if (!team.hasComponent('team')) {
        console.error('TeamsSystem: Attempting to activate an entity without a team component', entity);
      }
      if ((ref = this.activeTeam()) != null) {
        ref.team.active = false;
      }
      this.active_team = team;
      return console.log('Activated team', team.id);
    };

    TeamsSystem.prototype.createTurnOrder = function() {
      var i, j, len, ref, results, t;
      this.ordered_teams = this.entities;
      i = 0;
      ref = this.ordered_teams;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        t = ref[j];
        results.push(t.team.turn_index = i++);
      }
      return results;
    };

    TeamsSystem.prototype.activeTeam = function() {
      return this.active_team;
    };

    TeamsSystem.prototype.activeUserId = function() {
      var ref;
      return (ref = this.active_team) != null ? ref.user_id : void 0;
    };

    TeamsSystem.prototype.localIsActive = function() {
      var ref, ref1;
      return ((ref = this.localTeam()) != null ? ref.id : void 0) === ((ref1 = this.activeTeam()) != null ? ref1.id : void 0);
    };

    TeamsSystem.prototype.localTeam = function() {
      return _.find(this.entities, (function(_this) {
        return function(t) {
          var ref;
          return t.user_id === ((ref = _this.engine.getSystem('users').localUser()) != null ? ref.id : void 0);
        };
      })(this));
    };

    TeamsSystem.prototype.isAlly = function(entity) {
      var ref, ref1;
      return ((ref = this.localTeam()) != null ? ref.id : void 0) === ((ref1 = entity.team_membership) != null ? ref1.team_id : void 0);
    };

    TeamsSystem.prototype.isEnemy = function(entity) {
      var ref, ref1;
      return ((ref = this.localTeam()) != null ? ref.id : void 0) !== ((ref1 = entity.team_membership) != null ? ref1.team_id : void 0);
    };

    return TeamsSystem;

  })(System);

}).call(this);
