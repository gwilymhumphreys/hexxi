// Generated by CoffeeScript 1.7.1
(function() {
  var BUILTIN_PATHS, Engine, Entity, EventEmitter, globals, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  EventEmitter = require('../lib/event_emitter');

  Entity = require('../entities/entity');

  globals = window || global;

  BUILTIN_PATHS = {
    commands: 'client/src/commands/',
    systems: 'client/src/systems/'
  };

  Engine = (function(_super) {
    __extends(Engine, _super);

    function Engine() {
      this.setActiveTeam = __bind(this.setActiveTeam, this);
      this.update = __bind(this.update, this);
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      this.removeEntity = __bind(this.removeEntity, this);
      this.addEntity = __bind(this.addEntity, this);
      this.ensureEntity = __bind(this.ensureEntity, this);
      this.getCommand = __bind(this.getCommand, this);
      this.getSystem = __bind(this.getSystem, this);
      this.addSystem = __bind(this.addSystem, this);
      this.initSystem = __bind(this.initSystem, this);
      this.components = __bind(this.components, this);
      this.entitiesByComponent = __bind(this.entitiesByComponent, this);
      this.entityById = __bind(this.entityById, this);
      this.appendPaths = __bind(this.appendPaths, this);
      this.loadModules = __bind(this.loadModules, this);
      this.createSystems = __bind(this.createSystems, this);
      this.configure = __bind(this.configure, this);
      Engine.__super__.constructor.apply(this, arguments);
      this.paused = true;
      this.modules = [];
      this.entities = [];
      this.systems = [];
      this.commands_by_name = {};
      this.systems_by_name = {};
      this.appendPaths(BUILTIN_PATHS);
    }

    Engine.prototype.configure = function(options) {
      this.options = options != null ? options : {};
      console.trace('configure');
      if (this.options.paths) {
        this.appendPaths(this.options.paths);
      }
      this.loadModules();
      this.createSystems();
      return this.init();
    };

    Engine.prototype.init = function() {
      var system, _i, _len, _ref;
      _ref = this.systems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        system = _ref[_i];
        system.init(this);
      }
      return this.update();
    };

    Engine.prototype.createSystems = function() {
      var Command, System, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.modules.systems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        System = _ref[_i];
        this.addSystem(new System(this.options.systems[System._name]));
      }
      _ref1 = this.modules.commands;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        Command = _ref1[_j];
        _results.push(this.commands_by_name[Command.prototype._name] = Command);
      }
      return _results;
    };

    Engine.prototype.loadModules = function() {
      var base_path, key, modules, path, paths, registered_modules, _i, _j, _len, _len1, _ref, _results;
      registered_modules = globals.require.list();
      _ref = this.paths;
      _results = [];
      for (key in _ref) {
        paths = _ref[key];
        modules = this.modules[key] = [];
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          base_path = paths[_i];
          for (_j = 0, _len1 = registered_modules.length; _j < _len1; _j++) {
            path = registered_modules[_j];
            if (path.match("^" + base_path)) {
              modules.push(require(path));
            }
          }
        }
        _results.push(console.log('loaded', paths, modules));
      }
      return _results;
    };

    Engine.prototype.appendPaths = function(path_obj) {
      var key, path, paths, _base, _i, _len;
      this.paths || (this.paths = []);
      for (key in path_obj) {
        paths = path_obj[key];
        if (!BUILTIN_PATHS[key]) {
          return console.error("Hexxi::configure - given key is not used by Hexxi, maybe a typo?: " + key);
        }
        if (!_.isArray(paths)) {
          paths = [paths];
        }
        (_base = this.paths)[key] || (_base[key] = []);
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          path = paths[_i];
          if (__indexOf.call(this.paths[key], path) < 0) {
            this.paths[key].push(path);
          }
        }
      }
    };

    Engine.prototype.entityById = function(id) {
      return _.find(this.entities, function(entity) {
        return entity.id === id;
      });
    };

    Engine.prototype.entitiesByComponent = function(component_name) {
      return _.filter(this.entities, function(entity) {
        return entity.hasComponent(component_name);
      });
    };

    Engine.prototype.components = function(component_name) {
      var entity, _i, _len, _ref, _results;
      _ref = this.entitiesByComponent(component_name);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity[component_name]);
      }
      return _results;
    };

    Engine.prototype.initSystem = function(system) {
      if (_.isString(system)) {
        system = this.getSystem(system);
      }
      return system.init(this);
    };

    Engine.prototype.addSystem = function(system) {
      this.systems.push(system);
      return this.systems_by_name[system._name] = system;
    };

    Engine.prototype.getSystem = function(system_name) {
      return this.systems_by_name[system_name];
    };

    Engine.prototype.getCommand = function(name) {
      return this.commands_by_name[name];
    };

    Engine.prototype.isEntity = function(entity) {
      return entity instanceof Entity;
    };

    Engine.prototype.ensureEntity = function(entity) {
      if (_.isNumber(entity)) {
        return this.entityById(entity);
      }
      return entity;
    };

    Engine.prototype.addEntity = function(entity) {
      this.entities.push(entity);
      return this.emit('entity/created', entity);
    };

    Engine.prototype.removeEntity = function(entity) {
      var e;
      this.emit('entity/destroyed', entity);
      return this.entities = (function() {
        var _i, _len, _ref, _results;
        _ref = this.entities;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          if (e !== entity) {
            _results.push(e);
          }
        }
        return _results;
      }).call(this);
    };

    Engine.prototype.start = function() {
      return this.paused = false;
    };

    Engine.prototype.stop = function() {
      return this.paused = true;
    };

    Engine.prototype.update = function() {
      var system, _i, _len, _ref, _results;
      window.requestAnimationFrame(this.update);
      if (this.paused) {
        return;
      }
      _ref = this.systems;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        system = _ref[_i];
        _results.push(system.update());
      }
      return _results;
    };

    Engine.prototype.setActiveTeam = function(team) {
      return this.active_team = team;
    };

    return Engine;

  })(EventEmitter);

  module.exports = new Engine();

}).call(this);
