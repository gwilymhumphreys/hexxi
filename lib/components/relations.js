// Generated by CoffeeScript 1.9.3
(function() {
  var Component, Relations,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component = require('./component');

  module.exports = Relations = (function(superClass) {
    extend(Relations, superClass);

    Relations.prototype._name = 'relations';

    function Relations() {
      this.toJSON = bind(this.toJSON, this);
      this.removeChild = bind(this.removeChild, this);
      this.addChild = bind(this.addChild, this);
      this.revertParent = bind(this.revertParent, this);
      this.setParent = bind(this.setParent, this);
      Relations.__super__.constructor.apply(this, arguments);
      this.children = [];
      if (this.parent) {
        this.setParent(this.parent);
      } else {
        this.parent = null;
      }
    }

    Relations.prototype.setParent = function(parent) {
      if (this.entity.equals(parent)) {
        return console.trace("RelationsComponent: Attempting to set an entity's parent to itself", this.entity);
      }
      if (this.previous_parent = this.parent) {
        this.previous_parent.relations.children = _.without(this.previous_parent.relations.children, this.entity);
      }
      if (parent) {
        this.parent = parent;
        parent.relations.children.push(this.entity);
      } else {
        this.parent = null;
      }
      return this.entity.emit('parent/changed', this.entity);
    };

    Relations.prototype.revertParent = function() {
      return this.setParent(this.previous_parent);
    };

    Relations.prototype.addChild = function(child) {
      return child.setParent(this.entity);
    };

    Relations.prototype.removeChild = function(child) {
      return child.setParent(null);
    };

    Relations.prototype.toJSON = function() {
      var e;
      return {
        parent: this.parent,
        previous_parent: this.previous_parent,
        children: (function() {
          var i, len, ref, results;
          ref = this.children;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            e = ref[i];
            results.push(e.id);
          }
          return results;
        }).call(this)
      };
    };

    return Relations;

  })(Component);

}).call(this);
