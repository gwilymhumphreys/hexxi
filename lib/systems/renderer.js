// Generated by CoffeeScript 1.9.3
(function() {
  var PIXI, Renderer, System, View, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  PIXI = require('pixi.js');

  System = require('./system');

  View = require('../components/views/view');

  module.exports = Renderer = (function(superClass) {
    extend(Renderer, superClass);

    Renderer.prototype._name = 'renderer';

    function Renderer() {
      this.isView = bind(this.isView, this);
      this.entityViews = bind(this.entityViews, this);
      this.setTexture = bind(this.setTexture, this);
      this.removeFromStage = bind(this.removeFromStage, this);
      this.addToStage = bind(this.addToStage, this);
      this.getStage = bind(this.getStage, this);
      this.setStage = bind(this.setStage, this);
      this.createDisplayObjects = bind(this.createDisplayObjects, this);
      this.update = bind(this.update, this);
      this.onParentChanged = bind(this.onParentChanged, this);
      this.onEntityDestroyed = bind(this.onEntityDestroyed, this);
      this.onEntityCreated = bind(this.onEntityCreated, this);
      Renderer.__super__.constructor.apply(this, arguments);
      this.stage = new PIXI.Container();
      window.stage = this.stage;
      this.renderer = PIXI.autoDetectRenderer(800, 600);
      this.renderer.backgroundColor = 0xFFFFFF;
      this.view = this.renderer.view;
      document.body.appendChild(this.view);
    }

    Renderer.prototype.onEntityCreated = function(entity) {
      if (!this.entityViews(entity).length) {
        return;
      }
      Renderer.__super__.onEntityCreated.apply(this, arguments);
      this.createDisplayObjects(entity);
      this.setStage(entity);
      return entity.on('parent/changed', this.onParentChanged);
    };

    Renderer.prototype.onEntityDestroyed = function(entity) {
      Renderer.__super__.onEntityDestroyed.apply(this, arguments);
      return entity.off('parent/changed', this.onParentChanged);
    };

    Renderer.prototype.onParentChanged = function(entity) {
      return this.setStage(entity);
    };

    Renderer.prototype.update = function() {
      var entity, i, j, len, len1, ref, ref1, ref2, ref3, view;
      ref = this.engine.entitiesByComponent('view');
      for (i = 0, len = ref.length; i < len; i++) {
        entity = ref[i];
        ref1 = this.entityViews(entity);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          view = ref1[j];
          if (typeof view.update === "function") {
            view.update();
          }
          view.display_object.position.x = entity.position.x + (((ref2 = view.offset) != null ? ref2.x : void 0) || 0);
          view.display_object.position.y = entity.position.y + (((ref3 = view.offset) != null ? ref3.y : void 0) || 0);
        }
      }
      return this.renderer.render(this.stage);
    };

    Renderer.prototype.createDisplayObjects = function(entity) {
      var i, len, ref, results, view;
      ref = this.entityViews(entity);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        view = ref[i];
        results.push(view.createDisplayObject());
      }
      return results;
    };

    Renderer.prototype.setStage = function(entity) {
      var i, len, ref, results, view;
      ref = this.entityViews(entity);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        view = ref[i];
        this.removeFromStage(view);
        view.stage = this.getStage(entity, view);
        results.push(this.addToStage(view));
      }
      return results;
    };

    Renderer.prototype.getStage = function(entity, view) {
      var ref, ref1, ref2, stage, stage_view;
      if (view != null ? view.parent : void 0) {
        if (_.isString(view.parent)) {
          stage_view = entity.getComponent(view.parent);
        } else {
          stage_view = view.parent;
        }
        if (!this.isView(stage_view)) {
          console.log('Hexxi.Renderer: Invalid parent view for', view);
        }
        if (!(stage = stage_view.display_object)) {
          console.log('Hexxi.Renderer: display_object missing from parent view for', view, 'parent', stage_view);
        }
      } else {
        stage = ((ref = entity.relations) != null ? (ref1 = ref.parent) != null ? (ref2 = ref1.view) != null ? ref2.display_object : void 0 : void 0 : void 0) || this.stage;
      }
      return stage;
    };

    Renderer.prototype.addToStage = function(view) {
      var stage;
      if (!(stage = view.stage)) {
        return;
      }
      if (stage.children.indexOf(view.display_object) >= 0) {
        return;
      }
      stage.addChild(view.display_object);
      return stage.children.sort(function(a, b) {
        return (a.z_index || 0) - (b.z_index || 0);
      });
    };

    Renderer.prototype.removeFromStage = function(view) {
      var stage;
      if (!((stage = view.stage) && stage.children.indexOf(view.display_object) >= 0)) {
        return false;
      }
      stage.removeChild(view.display_object);
      return true;
    };

    Renderer.prototype.setTexture = function(entity, texture) {
      entity.view.texture = texture;
      entity.view.pixi_texture = PIXI.Texture.fromImage(texture);
      return entity.view.display_object.texture = entity.view.pixi_texture;
    };

    Renderer.prototype.entityViews = function(entity) {
      var component, name, ref, results;
      ref = entity.components;
      results = [];
      for (name in ref) {
        component = ref[name];
        if (this.isView(component)) {
          results.push(component);
        }
      }
      return results;
    };

    Renderer.prototype.isView = function(component) {
      return component._view || component instanceof View;
    };

    return Renderer;

  })(System);

}).call(this);
