// Generated by CoffeeScript 1.7.1
(function() {
  var DEFAULTS, Engine, HoverEffects, PIXI, System,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PIXI = require('pixi');

  Engine = require('../engine/engine');

  System = require('./system');

  DEFAULTS = {
    COLOUR: '#ffffff'
  };

  module.exports = HoverEffects = (function(_super) {
    __extends(HoverEffects, _super);

    function HoverEffects() {
      this.onMouseout = __bind(this.onMouseout, this);
      this.onMouseover = __bind(this.onMouseover, this);
      this.createDisplayObject = __bind(this.createDisplayObject, this);
      this.onEntityCreated = __bind(this.onEntityCreated, this);
      return HoverEffects.__super__.constructor.apply(this, arguments);
    }

    HoverEffects.prototype.onEntityCreated = function(entity) {
      if (!entity.hasComponent('hover_effects')) {
        return;
      }
      this.createDisplayObject(entity);
      entity.on('mouseover', this.onMouseover);
      return entity.on('mouseout', this.onMouseout);
    };

    HoverEffects.prototype.createDisplayObject = function(entity) {
      var outline;
      if (outline = entity.hover_effects.outline) {
        entity.hover_effects.display_object = new PIXI.Graphics();
        entity.hover_effects.display_object.lineStyle(1, outline.colour || DEFAULTS.COLOUR);
        entity.hover_effects.display_object.drawCircle(0, 0, 35);
        entity.hover_effects.display_object.endFill();
        entity.hover_effects.display_object.position.x = 35;
        entity.hover_effects.display_object.position.y = 35;
      }
      return entity.hover_effects.display_object;
    };

    HoverEffects.prototype.onMouseover = function(event, entity) {
      if (entity.hover_effects.hovering) {
        return;
      }
      entity.hover_effects.hovering = true;
      return entity.view.display_object.addChild(entity.hover_effects.display_object);
    };

    HoverEffects.prototype.onMouseout = function(event, entity) {
      if (!entity.hover_effects.hovering) {
        return;
      }
      entity.hover_effects.hovering = false;
      return entity.view.display_object.removeChild(entity.hover_effects.display_object);
    };

    return HoverEffects;

  })(System);

}).call(this);
