// Generated by CoffeeScript 1.7.1
(function() {
  var Engine, PIXI, Renderer, System,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PIXI = require('pixi');

  Engine = require('../engine/engine');

  System = require('./system');

  module.exports = Renderer = (function(_super) {
    __extends(Renderer, _super);

    Renderer.prototype._name = 'renderer';

    function Renderer() {
      this.setTexture = __bind(this.setTexture, this);
      this.removeFromStage = __bind(this.removeFromStage, this);
      this.addToStage = __bind(this.addToStage, this);
      this.getStage = __bind(this.getStage, this);
      this.setStage = __bind(this.setStage, this);
      this.createDisplayObject = __bind(this.createDisplayObject, this);
      this.update = __bind(this.update, this);
      this.onParentChanged = __bind(this.onParentChanged, this);
      this.onEntityDestroyed = __bind(this.onEntityDestroyed, this);
      this.onEntityCreated = __bind(this.onEntityCreated, this);
      this.stage = new PIXI.Stage(0x66FF99);
      this.renderer = PIXI.autoDetectRenderer(800, 600);
      document.body.appendChild(this.renderer.view);
    }

    Renderer.prototype.onEntityCreated = function(entity) {
      if (!entity.hasComponent('view')) {
        return;
      }
      Renderer.__super__.onEntityCreated.apply(this, arguments);
      this.setStage(entity);
      this.createDisplayObject(entity);
      this.addToStage(entity);
      return entity.on('parent/changed', this.onParentChanged);
    };

    Renderer.prototype.onEntityDestroyed = function(entity) {
      Renderer.__super__.onEntityDestroyed.apply(this, arguments);
      return entity.off('parent/changed', this.onParentChanged);
    };

    Renderer.prototype.onParentChanged = function(entity) {
      return this.setStage(entity);
    };

    Renderer.prototype.update = function() {
      var entity, _i, _len, _ref;
      _ref = Engine.entitiesByComponent('view');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        entity.view.display_object.position.x = entity.position.x;
        entity.view.display_object.position.y = entity.position.y;
      }
      return this.renderer.render(this.stage);
    };

    Renderer.prototype.createDisplayObject = function(entity) {
      return entity.view.createDisplayObject();
    };

    Renderer.prototype.setStage = function(entity) {
      var removed;
      removed = this.removeFromStage(entity);
      entity.view.stage = this.getStage(entity);
      if (removed) {
        return this.addToStage(entity);
      }
    };

    Renderer.prototype.getStage = function(entity) {
      var _ref, _ref1, _ref2;
      return ((_ref = entity.relations) != null ? (_ref1 = _ref.parent) != null ? (_ref2 = _ref1.view) != null ? _ref2.display_object : void 0 : void 0 : void 0) || this.stage;
    };

    Renderer.prototype.addToStage = function(entity) {
      var stage;
      if (!(stage = entity.view.stage)) {
        return;
      }
      if (stage.children.indexOf(entity.view.display_object) >= 0) {
        return;
      }
      stage.addChild(entity.view.display_object);
      return entity.emit('show', entity.view.display_object);
    };

    Renderer.prototype.removeFromStage = function(entity) {
      var stage;
      if (!((stage = entity.view.stage) && stage.children.indexOf(entity.view.display_object) >= 0)) {
        return false;
      }
      stage.removeChild(entity.view.display_object);
      entity.emit('hide', entity.view.display_object);
      return true;
    };

    Renderer.prototype.setTexture = function(entity, texture) {
      entity.view.texture = texture;
      entity.view.pixi_texture = PIXI.Texture.fromImage(texture);
      return entity.view.display_object.setTexture(entity.view.pixi_texture);
    };

    return Renderer;

  })(System);

}).call(this);
