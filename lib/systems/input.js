// Generated by CoffeeScript 1.9.3
(function() {
  var CONTEXTS, InputSystem, System,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  System = require('./system');

  CONTEXTS = ['attack', 'select', 'selected'];

  module.exports = InputSystem = (function(superClass) {
    extend(InputSystem, superClass);

    InputSystem.prototype._name = 'input';

    function InputSystem(options, context_names) {
      this.context_names = context_names != null ? context_names : CONTEXTS;
      this.addContext = bind(this.addContext, this);
      this.setContext = bind(this.setContext, this);
      this.init = bind(this.init, this);
      InputSystem.__super__.constructor.call(this, options);
    }

    InputSystem.prototype.init = function() {
      var context_name, i, len, ref, results;
      InputSystem.__super__.init.apply(this, arguments);
      this.contexts = [];
      ref = this.context_names;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        context_name = ref[i];
        results.push(this.addContext(context_name));
      }
      return results;
    };

    InputSystem.prototype.setContext = function() {
      var args, context_name, ref, ref1;
      context_name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if ((ref = this.current_context) != null) {
        ref.deactivate();
      }
      this.current_context = this.contexts[context_name];
      return (ref1 = this.current_context).activate.apply(ref1, args);
    };

    InputSystem.prototype.addContext = function(name) {
      var Context;
      Context = this.engine.getInputContext(name);
      return this.contexts[name] = new Context();
    };

    return InputSystem;

  })(System);

}).call(this);
