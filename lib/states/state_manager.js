// Generated by CoffeeScript 1.9.3
(function() {
  var StateManager, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('lodash');

  module.exports = StateManager = (function() {
    function StateManager(options) {
      this._setCurrentState = bind(this._setCurrentState, this);
      this.preUpdate = bind(this.preUpdate, this);
      this.start = bind(this.start, this);
      this.add = bind(this.add, this);
      this.configure = bind(this.configure, this);
      this.states = {};
      if (options) {
        this.configure(options);
      }
    }

    StateManager.prototype.configure = function(options) {
      var ref, results, state, state_name;
      if (options != null ? options.states : void 0) {
        ref = options.states;
        results = [];
        for (state_name in ref) {
          state = ref[state_name];
          results.push(this.add(state_name, state));
        }
        return results;
      }
    };

    StateManager.prototype.add = function(state_name, state) {
      return this.states[state_name] = state;
    };

    StateManager.prototype.start = function(state_name) {
      if (this.current_state_name === state_name) {
        return console.log("Hexxi.StateManager.Start: " + state_name + " is the currrent state");
      }
      if (this._pending_state_name === state_name) {
        return console.log("Hexxi.StateManager.Start: " + state_name + " is already pending");
      }
      if (!this.states[state_name]) {
        return console.error("Hexxi.StateManager.Start: " + state_name + " state does not exist (configure with options.states)");
      }
      return this._pending_state_name = state_name;
    };

    StateManager.prototype.preUpdate = function() {
      var ref;
      if (!this._pending_state_name) {
        return;
      }
      if ((ref = this.current_state) != null) {
        ref.shutdown();
      }
      return this._setCurrentState(this._pending_state_name);
    };

    StateManager.prototype._setCurrentState = function(state_name) {
      this.current_state_name = state_name;
      this._pending_state_name = null;
      this.current_state = new this.states[state_name]();
      this.current_state.init();
      this.current_state.preload();
      return this.current_state.create();
    };

    return StateManager;

  })();

}).call(this);
