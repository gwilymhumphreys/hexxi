// Generated by CoffeeScript 1.9.3
(function() {
  var AllySelectedContext, MoveCommand, Select, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  MoveCommand = require('../commands/move');

  Select = require('./select');

  module.exports = AllySelectedContext = (function(superClass) {
    extend(AllySelectedContext, superClass);

    function AllySelectedContext() {
      this.onTileSelect = bind(this.onTileSelect, this);
      this.onEnemySelect = bind(this.onEnemySelect, this);
      this.onAllySelect = bind(this.onAllySelect, this);
      this.onRightClick = bind(this.onRightClick, this);
      this.deactivate = bind(this.deactivate, this);
      this.activate = bind(this.activate, this);
      return AllySelectedContext.__super__.constructor.apply(this, arguments);
    }

    AllySelectedContext.prototype._name = 'selected';

    AllySelectedContext.prototype.activate = function(entity1) {
      var entity, i, j, k, l, len, len1, len2, len3, len4, m, ref, ref1, ref2, ref3, ref4, tile;
      this.entity = entity1;
      this.ally_units = [];
      this.enemy_units = [];
      this.tiles = [];
      ref = this.engine.entitiesByComponent('selectable');
      for (i = 0, len = ref.length; i < len; i++) {
        entity = ref[i];
        if (this.engine.getSystem('teams').isAlly(entity)) {
          this.ally_units.push(entity);
        }
        if (this.engine.getSystem('teams').isEnemy(entity)) {
          this.enemy_units.push(entity);
        }
      }
      ref1 = this.engine.entitiesByComponent('tile');
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        tile = ref1[j];
        if (!this.engine.getSystem('hex_grid').occupied(tile.hex_position)) {
          this.tiles.push(tile);
        }
      }
      ref2 = this.ally_units;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        entity = ref2[k];
        entity.on('click', this.onAllySelect);
      }
      ref3 = this.enemy_units;
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        entity = ref3[l];
        entity.on('click', this.onEnemySelect);
      }
      ref4 = this.tiles;
      for (m = 0, len4 = ref4.length; m < len4; m++) {
        entity = ref4[m];
        entity.on('click', this.onTileSelect);
      }
      return this.engine.on('rightclick', this.onRightClick);
    };

    AllySelectedContext.prototype.deactivate = function() {
      var entity, i, j, k, len, len1, len2, ref, ref1, ref2, results;
      ref = this.ally_units;
      for (i = 0, len = ref.length; i < len; i++) {
        entity = ref[i];
        entity.off('click', this.onAllySelect);
      }
      ref1 = this.enemy_units;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        entity = ref1[j];
        entity.off('click', this.onEnemySelect);
      }
      ref2 = this.tiles;
      results = [];
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        entity = ref2[k];
        results.push(entity.off('click', this.onTileSelect));
      }
      return results;
    };

    AllySelectedContext.prototype.onRightClick = function() {
      this.engine.getSystem('selectables').deselect(this.entity);
      return this.engine.getSystem('input').setContext('select');
    };

    AllySelectedContext.prototype.onAllySelect = function(entity, event) {
      var selected;
      if (selected = this.engine.getSystem('selectables').toggle(entity)) {
        return this.engine.getSystem('input').setContext('selected', entity);
      } else {
        return this.engine.getSystem('input').setContext('select');
      }
    };

    AllySelectedContext.prototype.onEnemySelect = function(entity, event) {
      var command, path;
      if (!(path = this.engine.getSystem('pathing').path)) {
        return;
      }
      command = new MoveCommand({
        entity: this.entity,
        path: path
      });
      this.engine.getSystem('selectables').deselect(this.entity);
      this.engine.getSystem('command_queue').push(command);
      return this.engine.getSystem('input').setContext('select');
    };

    AllySelectedContext.prototype.onTileSelect = function(entity, event) {
      var command, path;
      if (!(path = this.engine.getSystem('pathing').path)) {
        return;
      }
      command = new MoveCommand({
        entity: this.entity,
        path: path
      });
      this.engine.getSystem('selectables').deselect(this.entity);
      this.engine.getSystem('command_queue').push(command);
      return this.engine.getSystem('input').setContext('select');
    };

    return AllySelectedContext;

  })(Select);

}).call(this);
