// Generated by CoffeeScript 1.9.3
(function() {
  var Entity, EventEmitter, _, entity_count,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  EventEmitter = require('../lib/event_emitter');

  entity_count = 0;

  module.exports = Entity = (function(superClass) {
    extend(Entity, superClass);

    function Entity(options) {
      if (options == null) {
        options = {};
      }
      this.hasComponent = bind(this.hasComponent, this);
      this.getComponent = bind(this.getComponent, this);
      this.addCreatedComponent = bind(this.addCreatedComponent, this);
      this.addComponent = bind(this.addComponent, this);
      this.equals = bind(this.equals, this);
      this.destroy = bind(this.destroy, this);
      this.toString = bind(this.toString, this);
      this.options = options;
      Entity.__super__.constructor.apply(this, arguments);
      this.id = options.id || ++entity_count;
      this.components = {};
      this.children = [];
      this.engine || (this.engine = require('../engine'));
    }

    Entity.prototype.toString = function() {
      var ref, ref1, ref2, ref3, s;
      s = this._name + " (" + this.id + ")\n";
      if (this.position) {
        s += " [x: " + ((ref = this.position) != null ? ref.x : void 0) + ", y: " + ((ref1 = this.position) != null ? ref1.y : void 0) + "]\n";
      }
      if (this.hex_position) {
        s += " [q: " + ((ref2 = this.hex_position) != null ? ref2.q : void 0) + ", r: " + ((ref3 = this.hex_position) != null ? ref3.r : void 0) + "]\n";
      }
      return s;
    };

    Entity.prototype.destroy = function() {
      var component, name, ref, results;
      this.removeAllListeners();
      ref = this.components;
      results = [];
      for (name in ref) {
        component = ref[name];
        results.push(component.destroy());
      }
      return results;
    };

    Entity.prototype.equals = function(entity) {
      return this.id === (entity != null ? entity.id : void 0);
    };

    Entity.prototype.addComponent = function(component_name, component_path, options) {
      var Component, base, component;
      if (arguments.length === 1) {
        Component = this._loadComponent(component_name);
      } else if (_.isObject(component_path)) {
        options = component_path;
        Component = this._loadComponent(component_name);
      } else {
        Component = this._loadComponent(component_path);
      }
      options = _.defaults(options || {}, (base = this.options)[component_name] || (base[component_name] = {}));
      component = new Component(this, options);
      return this.addCreatedComponent(component_name, component);
    };

    Entity.prototype.addCreatedComponent = function(component_name, component) {
      if (arguments.length === 1) {
        component = component_name;
        component_name = component._name;
      }
      this.components[component_name] = component;
      return this[component_name] = component;
    };

    Entity.prototype.getComponent = function(name) {
      return this.components[name];
    };

    Entity.prototype.hasComponent = function(component_name) {
      return !!this[component_name];
    };

    Entity.prototype._loadComponent = function(component_name) {
      return this.engine.getComponent(component_name);
    };

    return Entity;

  })(EventEmitter);

}).call(this);
