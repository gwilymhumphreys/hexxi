// Generated by CoffeeScript 1.7.1
(function() {
  var Board, Engine, GridTile, HexGrid, HexUtils, System, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  Engine = require('../engine/engine');

  System = require('./system');

  HexUtils = require('../lib/hex_utils');

  Board = require('../entities/board');

  GridTile = require('../entities/grid_tile');

  module.exports = HexGrid = (function(_super) {
    __extends(HexGrid, _super);

    HexGrid.prototype._name = 'hex_grid';

    function HexGrid(options) {
      var key, value, _ref;
      this.options = options != null ? options : {};
      this.getTile = __bind(this.getTile, this);
      this.entitiesNotAtCoords = __bind(this.entitiesNotAtCoords, this);
      this.entitiesAtCoords = __bind(this.entitiesAtCoords, this);
      this.coordsToPixelOffset = __bind(this.coordsToPixelOffset, this);
      this.coordsToPixel = __bind(this.coordsToPixel, this);
      this.pixelToCoords = __bind(this.pixelToCoords, this);
      this.mouseEventCoords = __bind(this.mouseEventCoords, this);
      this.setScreenCoords = __bind(this.setScreenCoords, this);
      this.update = __bind(this.update, this);
      this.onClick = __bind(this.onClick, this);
      this.onMousemove = __bind(this.onMousemove, this);
      this.onEntityCreated = __bind(this.onEntityCreated, this);
      this.init = __bind(this.init, this);
      this.createTiles = __bind(this.createTiles, this);
      this.createGrid = __bind(this.createGrid, this);
      _.defaults(this.options, {
        tile_entity: GridTile,
        symmetrical: true,
        tile_size: 36,
        rows: 8,
        columns: 8
      });
      _ref = this.options;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      if (this.tile_height == null) {
        this.tile_height = HexUtils.heightFromSize(this.tile_size);
      }
      if (this.tile_width == null) {
        this.tile_width = HexUtils.widthFromSize(this.tile_size);
      }
      if (!Engine.isEntity(this.board)) {
        this.board = new Board(_.defaults(this.board || {}, {
          position: {
            x: 10,
            y: 10
          }
        }));
      }
      console.log(Math.floor(this.rows / 2) * this.tile_width, 3 / 4 * Math.floor(this.columns / 2) * this.tile_height);
      this.board.position.x += Math.floor(this.rows / 2) * this.tile_width;
      this.board.position.y += 3 / 4 * Math.floor(this.columns / 2) * this.tile_height;
      console.log(this.board);
    }

    HexGrid.prototype.createGrid = function() {
      var tile, _i, _len, _ref, _results;
      Engine.addEntity(this.board);
      this.tiles = this.createTiles();
      _ref = this.tiles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        _results.push(Engine.addEntity(tile));
      }
      return _results;
    };

    HexGrid.prototype.createTiles = function() {
      var from, q, r, tile, tiles, to, _i, _j, _ref, _ref1;
      tiles = [];
      for (r = _i = _ref = Math.floor(-this.columns / 2) + 1, _ref1 = Math.floor(this.columns / 2); _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; r = _ref <= _ref1 ? ++_i : --_i) {
        from = Math.floor(-this.rows / 2) + 1 - Math.ceil(r / 2);
        to = Math.floor(this.rows / 2) - Math.ceil(r / 2);
        if (this.symmetrical && r % 2 !== 0) {
          from += 1;
        }
        for (q = _j = from; from <= to ? _j <= to : _j >= to; q = from <= to ? ++_j : --_j) {
          tile = new this.tile_entity({
            hex_position: {
              q: q,
              r: r,
              traversable: true
            },
            relations: {
              parent: this.board
            }
          });
          tiles.push(tile);
        }
      }
      return tiles;
    };

    HexGrid.prototype.init = function() {
      HexGrid.__super__.init.apply(this, arguments);
      this.createGrid(this.options);
      document.addEventListener('mousemove', this.onMousemove);
      return document.addEventListener('click', this.onClick);
    };

    HexGrid.prototype.onEntityCreated = function(entity) {
      if (entity.hasComponent('hex_grid')) {
        return this.board = entity;
      } else if (entity.hasComponent('hex_position')) {
        return this.setScreenCoords(entity);
      }
    };

    HexGrid.prototype.onMousemove = function(event) {
      var coords, entity, _i, _j, _len, _len1, _ref, _ref1, _results;
      coords = this.mouseEventCoords(event);
      _ref = this.entitiesAtCoords(coords);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (!(!entity.hovering)) {
          continue;
        }
        entity.hovering = true;
        entity.emit('mouseover', event, entity);
      }
      _ref1 = this.entitiesNotAtCoords(coords);
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        entity = _ref1[_j];
        if (!entity.hovering) {
          continue;
        }
        entity.hovering = false;
        _results.push(entity.emit('mouseout', event, entity));
      }
      return _results;
    };

    HexGrid.prototype.onClick = function(event) {
      var coords, entity, _i, _len, _ref, _results;
      coords = this.mouseEventCoords(event);
      console.log(this.entitiesAtCoords(coords));
      _ref = this.entitiesAtCoords(coords);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.emit('click', event, entity));
      }
      return _results;
    };

    HexGrid.prototype.update = function() {
      var entity, _i, _len, _ref, _results;
      _ref = Engine.entitiesByComponent('hex_position');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.hex_position.has_moved) {
          this.setScreenCoords(entity);
          _results.push(entity.hex_position.has_moved = false);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    HexGrid.prototype.setScreenCoords = function(entity) {
      var screen_coords;
      screen_coords = this.coordsToPixel(entity.hex_position);
      return _.extend(entity.position, screen_coords);
    };

    HexGrid.prototype.mouseEventCoords = function(event) {
      return this.pixelToCoords(event.offsetX, event.offsetY);
    };

    HexGrid.prototype.pixelToCoords = function(x, y) {
      x = x - this.board.position.x - this.tile_width / 2;
      y = y - this.board.position.y - this.tile_height / 2;
      return HexUtils.pixelToCoords(x, y, this.tile_size);
    };

    HexGrid.prototype.coordsToPixel = function(q, r) {
      var _ref;
      if (arguments.length === 1) {
        _ref = q, q = _ref.q, r = _ref.r;
      }
      return {
        x: this.tile_size * Math.sqrt(3) * (q + r / 2),
        y: this.tile_size * 3 / 2 * r
      };
    };

    HexGrid.prototype.coordsToPixelOffset = function(q, r) {
      var pos;
      pos = this.coordsToPixel(q, r);
      pos.x += this.board.position.x;
      pos.y += this.board.position.y;
      return pos;
    };

    HexGrid.prototype.entitiesAtCoords = function(q, r) {
      var e, _i, _len, _ref, _ref1, _results;
      if (arguments.length === 1) {
        _ref = q, q = _ref.q, r = _ref.r;
      }
      _ref1 = Engine.entitiesByComponent('hex_position');
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        e = _ref1[_i];
        if (e.hex_position.q === q && e.hex_position.r === r) {
          _results.push(e);
        }
      }
      return _results;
    };

    HexGrid.prototype.entitiesNotAtCoords = function(q, r) {
      var e, _i, _len, _ref, _ref1, _results;
      if (arguments.length === 1) {
        _ref = q, q = _ref.q, r = _ref.r;
      }
      _ref1 = Engine.entitiesByComponent('hex_position');
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        e = _ref1[_i];
        if (e.hex_position.q !== q || e.hex_position.r !== r) {
          _results.push(e);
        }
      }
      return _results;
    };

    HexGrid.prototype.getTile = function(q, r) {
      var _ref;
      if (arguments.length === 1) {
        _ref = q, q = _ref.q, r = _ref.r;
      }
      return _.find(Engine.entitiesByComponent('tile'), function(test) {
        return test.hex_position.q === q && test.hex_position.r === r;
      });
    };

    return HexGrid;

  })(System);

}).call(this);
