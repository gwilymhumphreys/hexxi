// Generated by CoffeeScript 1.7.1
(function() {
  var Engine, Path, Pathing, System,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Engine = require('../engine/engine');

  System = require('./system');

  Path = require('../lib/path');

  module.exports = Pathing = (function(_super) {
    __extends(Pathing, _super);

    function Pathing() {
      this.showPath = __bind(this.showPath, this);
      this.hidePath = __bind(this.hidePath, this);
      this.pathEnd = __bind(this.pathEnd, this);
      this.pathStart = __bind(this.pathStart, this);
      this.onTileHover = __bind(this.onTileHover, this);
      this.onTileClick = __bind(this.onTileClick, this);
      this.onEntityDeselected = __bind(this.onEntityDeselected, this);
      this.onEntitySelected = __bind(this.onEntitySelected, this);
      this.onEntityDestroyed = __bind(this.onEntityDestroyed, this);
      this.onEntityCreated = __bind(this.onEntityCreated, this);
      this.init = __bind(this.init, this);
      return Pathing.__super__.constructor.apply(this, arguments);
    }

    Pathing.prototype._name = 'pathing';

    Pathing.prototype.init = function() {
      Pathing.__super__.init.apply(this, arguments);
      return this.pathing = false;
    };

    Pathing.prototype.onEntityCreated = function(entity) {
      if (!entity.hasComponent('pathable')) {
        return;
      }
      Pathing.__super__.onEntityCreated.apply(this, arguments);
      entity.on('selectable/select', this.onEntitySelected);
      return entity.on('selectable/deselect', this.onEntityDeselected);
    };

    Pathing.prototype.onEntityDestroyed = function(entity) {
      Pathing.__super__.onEntityDestroyed.apply(this, arguments);
      return entity.off('selectable/select', this.onEntitySelected);
    };

    Pathing.prototype.onEntitySelected = function(entity) {
      console.log('es', this.pathing);
      if (this.pathing) {

      } else {
        return this.pathStart(entity);
      }
    };

    Pathing.prototype.onEntityDeselected = function(entity) {
      return this.pathEnd(entity);
    };

    Pathing.prototype.onTileClick = function(e, entity) {
      if (this.pathing) {
        return this.pathEnd(entity);
      }
    };

    Pathing.prototype.onTileHover = function(e, entity) {
      var path_finder;
      if (!this.pathing) {
        return;
      }
      this.hidePath();
      path_finder = new Path(this.map, {
        end_traversable: true
      });
      this.path = path_finder.findPath(this.current.hex_position, entity.hex_position);
      return this.showPath();
    };

    Pathing.prototype.pathStart = function(entity) {
      var e, positions, _i, _len, _ref;
      this.map_entities = Engine.entitiesByComponent('hex_position');
      positions = [];
      _ref = this.map_entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        e.on('mouseover', this.onTileHover);
        e.on('click', this.onTileClick);
        positions.push(e.hex_position);
      }
      this.map = Path.createMap(positions);
      this.pathing = true;
      this.current = entity;
      return entity.emit('pathable/path_started', entity);
    };

    Pathing.prototype.pathEnd = function(entity) {
      var tile, _i, _len, _ref;
      _ref = this.map_entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        tile.off('mouseover', this.onTileHover);
        tile.off('click', this.onTileClick);
      }
      this.hidePath();
      this.pathing = false;
      this.current = null;
      console.log('pathend', this.path);
      return entity.emit('pathable/path_end', {
        path: this.path
      }, entity);
    };

    Pathing.prototype.hidePath = function() {
      var coords, tile, _i, _len, _ref, _results;
      if (this.path) {
        _ref = this.path;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          coords = _ref[_i];
          tile = Engine.getSystem('hex_grid').getTile(coords);
          _results.push(tile.emit('highlight/off', tile));
        }
        return _results;
      }
    };

    Pathing.prototype.showPath = function() {
      var coords, tile, _i, _len, _ref, _results;
      if (this.path) {
        _ref = this.path;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          coords = _ref[_i];
          tile = Engine.getSystem('hex_grid').getTile(coords);
          _results.push(tile.emit('highlight/on', tile));
        }
        return _results;
      }
    };

    return Pathing;

  })(System);

}).call(this);
