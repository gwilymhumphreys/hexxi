// Generated by CoffeeScript 1.7.1
(function() {
  var DEFAULTS, Engine, Highlightable, System,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Engine = require('../engine/engine');

  System = require('./system');

  DEFAULTS = {
    COLOUR: '#ffff55'
  };

  module.exports = Highlightable = (function(_super) {
    __extends(Highlightable, _super);

    function Highlightable() {
      this.onEndHighlight = __bind(this.onEndHighlight, this);
      this.onHighlight = __bind(this.onHighlight, this);
      this.createDisplayObject = __bind(this.createDisplayObject, this);
      this.onEntityCreated = __bind(this.onEntityCreated, this);
      return Highlightable.__super__.constructor.apply(this, arguments);
    }

    Highlightable.prototype._name = 'highlights';

    Highlightable.prototype.onEntityCreated = function(entity) {
      if (!entity.hasComponent('highlight')) {
        return;
      }
      Highlightable.__super__.onEntityCreated.apply(this, arguments);
      this.createDisplayObject(entity);
      entity.on('highlight/on', this.onHighlight);
      return entity.on('highlight/off', this.onEndHighlight);
    };

    Highlightable.prototype.createDisplayObject = function(entity) {
      entity.highlight.display_object = new PIXI.Graphics();
      entity.highlight.display_object.lineStyle(1, DEFAULTS.COLOUR);
      entity.highlight.display_object.drawCircle(0, 0, 35);
      entity.highlight.display_object.endFill();
      entity.highlight.display_object.position.x = 35;
      entity.highlight.display_object.position.y = 35;
      return entity.highlight.display_object;
    };

    Highlightable.prototype.onHighlight = function(entity) {
      if (entity.highlight.highlighting) {
        return;
      }
      entity.highlight.highlighting = true;
      return entity.view.display_object.addChild(entity.highlight.display_object);
    };

    Highlightable.prototype.onEndHighlight = function(entity) {
      if (!entity.highlight.highlighting) {
        return;
      }
      entity.highlight.highlighting = false;
      return entity.view.display_object.removeChild(entity.highlight.display_object);
    };

    return Highlightable;

  })(System);

}).call(this);
