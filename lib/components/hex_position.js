// Generated by CoffeeScript 1.9.3
(function() {
  var Component, HexPosition, HexUtils, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Component = require('./component');

  HexUtils = require('../lib/hex_utils');

  module.exports = HexPosition = (function(superClass) {
    extend(HexPosition, superClass);

    function HexPosition() {
      this.equals = bind(this.equals, this);
      this.toJSON = bind(this.toJSON, this);
      this.toCubeCoords = bind(this.toCubeCoords, this);
      this.setAndEmit = bind(this.setAndEmit, this);
      this.setHexPosition = bind(this.setHexPosition, this);
      return HexPosition.__super__.constructor.apply(this, arguments);
    }

    HexPosition.prototype._name = 'hex_position';

    HexPosition.prototype.setHexPosition = function(q, r) {
      var ref;
      if (arguments.length === 1) {
        ref = q, q = ref.q, r = ref.r;
      }
      this.q = q;
      return this.r = r;
    };

    HexPosition.prototype.set = HexPosition.prototype.setHexPosition;

    HexPosition.prototype.setAndEmit = function(position, from_position) {
      from_position || (from_position = this.toJSON());
      this.set(position);
      return this.engine.emit('enter_tile', {
        entity: this.entity,
        position: position,
        from_position: from_position
      });
    };

    HexPosition.prototype.toCubeCoords = function() {
      return HexUtils.axialToCoubeCoords(this.q, this.r);
    };

    HexPosition.prototype.toJSON = function() {
      return _.pick(this, 'q', 'r');
    };

    HexPosition.prototype.equals = function(pos) {
      return this.q === pos.q && this.r === pos.r;
    };

    return HexPosition;

  })(Component);

}).call(this);
