// Generated by CoffeeScript 1.7.1
(function() {
  var CONTEXTS, Engine, InputSystem, System,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Engine = require('../engine/engine');

  System = require('./system');

  CONTEXTS = ['attack', 'select', 'selected'];

  module.exports = InputSystem = (function(_super) {
    __extends(InputSystem, _super);

    InputSystem.prototype._name = 'input';

    function InputSystem(context_names) {
      this.context_names = context_names != null ? context_names : CONTEXTS;
      this.addContext = __bind(this.addContext, this);
      this.setContext = __bind(this.setContext, this);
      this.init = __bind(this.init, this);
    }

    InputSystem.prototype.init = function() {
      var context_name, _i, _len, _ref, _results;
      InputSystem.__super__.init.apply(this, arguments);
      this.contexts = [];
      _ref = this.context_names;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        context_name = _ref[_i];
        _results.push(this.addContext(context_name));
      }
      return _results;
    };

    InputSystem.prototype.setContext = function() {
      var args, context_name, _ref, _ref1;
      context_name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((_ref = this.current_context) != null) {
        _ref.deactivate();
      }
      this.current_context = this.contexts[context_name];
      return (_ref1 = this.current_context).activate.apply(_ref1, args);
    };

    InputSystem.prototype.addContext = function(name) {
      var Context;
      Context = require("../input/" + name);
      return this.contexts[name] = new Context();
    };

    return InputSystem;

  })(System);

}).call(this);
