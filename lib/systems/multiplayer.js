// Generated by CoffeeScript 1.9.3
(function() {
  var MultiplayerSystem, System,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  System = require('./system');

  module.exports = MultiplayerSystem = (function(superClass) {
    extend(MultiplayerSystem, superClass);

    function MultiplayerSystem() {
      this.sendCommand = bind(this.sendCommand, this);
      this.onCommand = bind(this.onCommand, this);
      this.onAssignTeam = bind(this.onAssignTeam, this);
      this.onGameStart = bind(this.onGameStart, this);
      this.init = bind(this.init, this);
      return MultiplayerSystem.__super__.constructor.apply(this, arguments);
    }

    MultiplayerSystem.prototype._name = 'multiplayer';

    MultiplayerSystem.prototype.init = function() {
      this.enabled = false;
      return;
      MultiplayerSystem.__super__.init.apply(this, arguments);
      this.primus = new Primus(this.url);
      this.socket = this.primus.channel('clients');
      console.log(this.socket.id);
      this.engine.getSystem('users').setLocalUserId(this.socket.id);
      this.socket.on('command', this.onCommand);
      this.socket.on('team', this.onAssignTeam);
      this.socket.on('game_start', this.onGameStart);
      return this.id = this.socket.id;
    };

    MultiplayerSystem.prototype.onGameStart = function(data) {
      console.log('GAME STARTING!');
      this.engine.started = true;
      return this.engine.getSystem('teams').activate(data.team_id);
    };

    MultiplayerSystem.prototype.onAssignTeam = function(data) {
      console.log('got team', data);
      return this.engine.getSystem('teams').setLocalTeam(data.team_id);
    };

    MultiplayerSystem.prototype.onCommand = function(data) {
      var Command, command;
      console.log('server said: ', data);
      if (data.user_id === this.id) {
        return;
      }
      if (!(Command = this.engine.getCommand(data.command))) {
        console.error('Command not found: ', data.command);
      }
      command = new Command(data.data, {
        remote: true
      });
      return this.engine.getSystem('command_queue').push(command);
    };

    MultiplayerSystem.prototype.sendCommand = function(command) {
      if (!this.enabled) {
        return;
      }
      return this.socket.send('command', command.toJSON());
    };

    return MultiplayerSystem;

  })(System);

}).call(this);
