// Generated by CoffeeScript 1.9.3
(function() {
  var Component, PIXI, View,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PIXI = require('pixi.js');

  Component = require('../component');

  module.exports = View = (function(superClass) {
    extend(View, superClass);

    function View() {
      this.destroy = bind(this.destroy, this);
      this.hide = bind(this.hide, this);
      this.show = bind(this.show, this);
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype._name = 'view';

    View.prototype._view = true;

    View.prototype.createDisplayObject = function() {
      this.display_object = new PIXI.Container();
      this.display_object.z_index = this.z_index || 0;
      this.entity.emit('view/display_object_created');
      return this.display_object;
    };

    View.prototype.show = function() {
      var ref;
      this.visible = true;
      return (ref = this.display_object) != null ? ref.visible = true : void 0;
    };

    View.prototype.hide = function() {
      var ref;
      this.visible = false;
      return (ref = this.display_object) != null ? ref.visible = false : void 0;
    };

    View.prototype.destroy = function() {
      return this.engine.getSystem('renderer').removeFromStage(this.entity);
    };

    return View;

  })(Component);

}).call(this);
