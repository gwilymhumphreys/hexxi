// Generated by CoffeeScript 1.9.3
(function() {
  var BUILTIN_PATHS, DEFAULT_OPTIONS, Engine, Entity, EventEmitter, MODULE_CATEGORIES, StateManager, _, globals,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  EventEmitter = require('./lib/event_emitter');

  StateManager = require('./states/state_manager');

  Entity = require('./entities/entity');

  globals = window || global;

  BUILTIN_PATHS = {
    animations: {
      animation: require('./animations/animation'),
      hex_path: require('./animations/hex_path'),
      linear: require('./animations/linear')
    },
    entities: {
      board: require('./entities/board'),
      entity: require('./entities/entity'),
      grid_tile: require('./entities/grid_tile'),
      team: require('./entities/team'),
      unit: require('./entities/unit'),
      user: require('./entities/user')
    },
    input: {
      context: require('./input/context'),
      select: require('./input/select'),
      selected: require('./input/selected')
    },
    commands: {
      move: require('./commands/move')
    },
    components: {
      animations: require('./components/animations'),
      clickable: require('./components/clickable'),
      component: require('./components/component'),
      hex_grid: require('./components/hex_grid'),
      hex_position: require('./components/hex_position'),
      highlight: require('./components/highlight'),
      hover_effects: require('./components/hover_effects'),
      pathable: require('./components/pathable'),
      position: require('./components/position'),
      relations: require('./components/relations'),
      selectable: require('./components/selectable'),
      team: require('./components/team'),
      team_membership: require('./components/team_membership'),
      tile: require('./components/tile'),
      user: require('./components/user'),
      circle: require('./components/views/circle'),
      sprite: require('./components/views/sprite'),
      text: require('./components/views/text'),
      view: require('./components/views/view')
    },
    systems: {
      animations: require('./systems/animations'),
      command_queue: require('./systems/command_queue'),
      hex_grid: require('./systems/hex_grid'),
      highlights: require('./systems/highlights'),
      hover_effects: require('./systems/hover_effects'),
      input: require('./systems/input'),
      multiplayer: require('./systems/multiplayer'),
      pathing: require('./systems/pathing'),
      relations: require('./systems/relations'),
      renderer: require('./systems/renderer'),
      selectables: require('./systems/selectables'),
      system: require('./systems/system'),
      teams: require('./systems/teams'),
      users: require('./systems/users')
    }
  };

  MODULE_CATEGORIES = _.keys(BUILTIN_PATHS);

  DEFAULT_OPTIONS = {
    states: {}
  };

  Engine = (function(superClass) {
    extend(Engine, superClass);

    function Engine() {
      this.reset = bind(this.reset, this);
      this.update = bind(this.update, this);
      this.stop = bind(this.stop, this);
      this.start = bind(this.start, this);
      this.removeEntity = bind(this.removeEntity, this);
      this.addEntity = bind(this.addEntity, this);
      this.ensureEntity = bind(this.ensureEntity, this);
      this.getInputContext = bind(this.getInputContext, this);
      this.getComponent = bind(this.getComponent, this);
      this.getCommand = bind(this.getCommand, this);
      this.getSystem = bind(this.getSystem, this);
      this.addSystem = bind(this.addSystem, this);
      this.initSystem = bind(this.initSystem, this);
      this.activeComponents = bind(this.activeComponents, this);
      this.entitiesByComponent = bind(this.entitiesByComponent, this);
      this.entityById = bind(this.entityById, this);
      this.appendPaths = bind(this.appendPaths, this);
      this.loadModules = bind(this.loadModules, this);
      this.createSystems = bind(this.createSystems, this);
      this.onClick = bind(this.onClick, this);
      this.onRightClick = bind(this.onRightClick, this);
      this.bindEvents = bind(this.bindEvents, this);
      this.init = bind(this.init, this);
      this.configure = bind(this.configure, this);
      Engine.__super__.constructor.apply(this, arguments);
      window.Engine = this;
      this.started = true;
      this.paused = true;
      this.modules = {};
      this.entities = [];
      this.systems = [];
      this.commands_by_name = {};
      this.components_by_name = {};
      this.systems_by_name = {};
      this.appendPaths(BUILTIN_PATHS);
      this.state = new StateManager();
    }

    Engine.prototype.configure = function(options) {
      if (options == null) {
        options = {};
      }
      this.options = _.defaults(options, DEFAULT_OPTIONS);
      if (this.options.states) {
        this.state.configure(this.options.states);
      }
      if (this.options.paths) {
        this.appendPaths(this.options.paths);
      }
      this.loadModules();
      this.createSystems();
      return this.init();
    };

    Engine.prototype.init = function() {
      var i, len, ref, system;
      ref = this.systems;
      for (i = 0, len = ref.length; i < len; i++) {
        system = ref[i];
        system.init(this);
      }
      this.update();
      return this.bindEvents();
    };

    Engine.prototype.bindEvents = function() {
      this.element = this.getSystem('renderer').view;
      this.element.addEventListener('click', this.onClick, false);
      return this.element.addEventListener('contextmenu', this.onRightClick, false);
    };

    Engine.prototype.onRightClick = function(event) {
      event.preventDefault();
      return this.emit('rightclick', event);
    };

    Engine.prototype.onClick = function(event) {
      if (event.which !== 1) {
        return;
      }
      event.preventDefault();
      return this.emit('click', event);
    };

    Engine.prototype.createSystems = function() {
      var System, i, len, ref, results;
      ref = this.modules.systems;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        System = ref[i];
        results.push(this.addSystem(new System(this.options.systems[System._name])));
      }
      return results;
    };

    Engine.prototype.loadModules = function() {
      var Command, Component, category, duplicate, i, j, k, len, len1, len2, module, name, path, ref, ref1, ref2, results;
      for (i = 0, len = MODULE_CATEGORIES.length; i < len; i++) {
        category = MODULE_CATEGORIES[i];
        this.modules[category] = [];
        ref = this.paths[category];
        for (name in ref) {
          path = ref[name];
          if (_.isString(path)) {
            module = require(path);
          } else {
            module = path;
          }
          if (module.prototype._name && (duplicate = _.find(this.modules[category], function(m) {
            return m.prototype._name === module.prototype._name;
          }))) {
            console.log("Hexxi.Engine warning: A " + category + " module with the name " + module.prototype._name + " already exists:", module, duplicate);
          }
          this.modules[category].push(module);
        }
      }
      ref1 = this.modules.commands;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        Command = ref1[j];
        this.commands_by_name[Command.prototype._name] = Command;
      }
      ref2 = this.modules.components;
      results = [];
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        Component = ref2[k];
        if (Component.prototype._name) {
          results.push(this.components_by_name[Component.prototype._name] = Component);
        }
      }
      return results;
    };

    Engine.prototype.appendPaths = function(path_obj) {
      var base, key, paths;
      this.paths || (this.paths = []);
      for (key in path_obj) {
        paths = path_obj[key];
        if (!BUILTIN_PATHS[key]) {
          return console.error("Hexxi::configure - given key is not used by Hexxi, maybe a typo?: " + key);
        }
        (base = this.paths)[key] || (base[key] = {});
        _.extend(this.paths[key], paths);
      }
    };

    Engine.prototype.entityById = function(id) {
      return _.find(this.entities, function(entity) {
        return entity.id === id;
      });
    };

    Engine.prototype.entitiesByComponent = function(component_name) {
      return _.filter(this.entities, function(entity) {
        return entity.hasComponent(component_name);
      });
    };

    Engine.prototype.activeComponents = function(component_name) {
      var entity, i, len, ref, results;
      ref = this.entitiesByComponent(component_name);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        entity = ref[i];
        results.push(entity[component_name]);
      }
      return results;
    };

    Engine.prototype.initSystem = function(system) {
      if (_.isString(system)) {
        system = this.getSystem(system);
      }
      return system.init(this);
    };

    Engine.prototype.addSystem = function(system) {
      this.systems.push(system);
      return this.systems_by_name[system._name] = system;
    };

    Engine.prototype.getSystem = function(system_name) {
      return this.systems_by_name[system_name];
    };

    Engine.prototype.getCommand = function(name) {
      return this.commands_by_name[name];
    };

    Engine.prototype.getComponent = function(name) {
      return this.components_by_name[name];
    };

    Engine.prototype.getInputContext = function(name) {
      return _.find(this.modules.input, function(c) {
        return c.prototype._name === name;
      });
    };

    Engine.prototype.isEntity = function(entity) {
      return entity instanceof Entity;
    };

    Engine.prototype.ensureEntity = function(entity) {
      if (_.isNumber(entity)) {
        return this.entityById(entity);
      }
      return entity;
    };

    Engine.prototype.addEntity = function(entity) {
      this.entities.push(entity);
      return this.emit('entity/created', entity);
    };

    Engine.prototype.removeEntity = function(entity) {
      var e;
      this.emit('entity/destroyed', entity);
      return this.entities = (function() {
        var i, len, ref, results;
        ref = this.entities;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          e = ref[i];
          if (e !== entity) {
            results.push(e);
          }
        }
        return results;
      }).call(this);
    };

    Engine.prototype.start = function() {
      return this.paused = false;
    };

    Engine.prototype.stop = function() {
      return this.paused = true;
    };

    Engine.prototype.update = function() {
      var i, j, len, len1, ref, ref1, results, system;
      window.requestAnimationFrame(this.update);
      if (this.paused) {
        return;
      }
      this.state.preUpdate();
      ref = this.systems;
      for (i = 0, len = ref.length; i < len; i++) {
        system = ref[i];
        if (system.preUpdate) {
          system.preUpdate();
        }
      }
      ref1 = this.systems;
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        system = ref1[j];
        results.push(system.update());
      }
      return results;
    };

    Engine.prototype.reset = function() {
      var entity, i, len, ref, results;
      ref = this.entities;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        entity = ref[i];
        results.push(entity.destroy());
      }
      return results;
    };

    return Engine;

  })(EventEmitter);

  module.exports = new Engine();

}).call(this);
