// Generated by CoffeeScript 1.9.3
(function() {
  var HexUtils;

  module.exports = HexUtils = (function() {
    function HexUtils() {}

    HexUtils.NEIGHBOURS = [[+1, 0], [+1, -1], [0, -1], [-1, 0], [-1, +1], [0, +1]];

    HexUtils.equal = function(p1, p2) {
      return (p1 != null ? p1.q : void 0) === (p2 != null ? p2.q : void 0) && (p1 != null ? p1.r : void 0) === (p2 != null ? p2.r : void 0);
    };

    HexUtils.heightFromSize = function(size) {
      return size * 2;
    };

    HexUtils.widthFromSize = function(size) {
      return Math.sqrt(3) / 2 * HexUtils.heightFromSize(size);
    };

    HexUtils.neighbour = function(q, r, direction) {
      var d, ref;
      if (arguments.length === 2) {
        direction = r;
        ref = q, q = ref.q, r = ref.r;
      }
      d = HexUtils.NEIGHBOURS[direction];
      return {
        q: q + d[0],
        r: r + d[1]
      };
    };

    HexUtils.axialToCubeCoords = function(q, r) {
      return {
        x: q,
        z: r,
        y: -q - r
      };
    };

    HexUtils.cubeToAxialCoords = function(x, y, z) {
      return {
        q: x,
        r: z
      };
    };

    HexUtils.pixelToCoords = function(x, y, tile_size) {
      var q, r;
      q = (1 / 3 * Math.sqrt(3) * x - 1 / 3 * y) / tile_size;
      r = 2 / 3 * y / tile_size;
      return HexUtils.roundCoords(q, r);
    };

    HexUtils.roundCoords = function(q, r) {
      var ref, ref1, x, y, z;
      if (arguments.length === 1) {
        ref = q, q = ref.q, r = ref.r;
      }
      ref1 = HexUtils.roundCoordsCubic(HexUtils.axialToCubeCoords(q, r)), x = ref1.x, y = ref1.y, z = ref1.z;
      return HexUtils.cubeToAxialCoords(x, y, z);
    };

    HexUtils.roundCoordsCubic = function(x, y, z) {
      var ref, rx, ry, rz, x_diff, y_diff, z_diff;
      if (arguments.length === 1) {
        ref = x, x = ref.x, y = ref.y, z = ref.z;
      }
      rx = Math.round(x);
      ry = Math.round(y);
      rz = Math.round(z);
      x_diff = Math.abs(rx - x);
      y_diff = Math.abs(ry - y);
      z_diff = Math.abs(rz - z);
      if (x_diff > y_diff && x_diff > z_diff) {
        rx = -ry - rz;
      } else if (y_diff > z_diff) {
        ry = -rx - rz;
      } else {
        rz = -rx - ry;
      }
      return {
        x: rx,
        y: ry,
        z: rz
      };
    };

    HexUtils.distance = function(r1, q1, r2, q2) {
      var ref, ref1;
      if (arguments.length === 2) {
        ref = [q1.q, q1.r], q2 = ref[0], r2 = ref[1];
        ref1 = [r1.q, r1.r], q1 = ref1[0], r1 = ref1[1];
      }
      return HexUtils.distanceCubic(HexUtils.axialToCubeCoords(q1, r1), HexUtils.axialToCubeCoords(q2, r2));
    };

    HexUtils.distanceCubic = function(x1, y1, z1, x2, y2, z2) {
      var ref, ref1;
      if (arguments.length === 2) {
        ref = [y1.x, y1.y, y1.z], x2 = ref[0], y2 = ref[1], z2 = ref[2];
        ref1 = [x1.x, x1.y, x1.z], x1 = ref1[0], y1 = ref1[1], z1 = ref1[2];
      }
      return Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2), Math.abs(z1 - z2));
    };

    HexUtils.line = function(r1, q1, r2, q2) {
      var da, db, i, j, n, points, ref, ref1, ref2;
      if (arguments.length === 2) {
        ref = [q1.q, q1.r], q2 = ref[0], r2 = ref[1];
        ref1 = [r1.q, r1.r], q1 = ref1[0], r1 = ref1[1];
      }
      points = [];
      n = HexUtils.distance(r1, q1, r2, q2);
      for (i = j = 0, ref2 = n; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
        db = i / n;
        da = 1 - db;
        points.push(HexUtils.roundCoords(q1 * da + q2 * db, r1 * da + r2 * db));
      }
      return points;
    };

    return HexUtils;

  })();

}).call(this);
