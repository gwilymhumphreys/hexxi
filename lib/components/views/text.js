// Generated by CoffeeScript 1.9.3
(function() {
  var PIXI, TextView, View, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  View = require('./view');

  PIXI = require('pixi.js');

  module.exports = TextView = (function(superClass) {
    extend(TextView, superClass);

    TextView.prototype._name = 'text';

    function TextView(entity, options) {
      this.entity = entity;
      this.update = bind(this.update, this);
      this.createDisplayObject = bind(this.createDisplayObject, this);
      TextView.__super__.constructor.apply(this, arguments);
      this.text_anchor || (this.text_anchor = {
        x: 0.5,
        y: 0
      });
      this.text_position || (this.text_position = {
        x: 20,
        y: 50
      });
      this.text_format || (this.text_format = {
        font: 'regular 8px Arial'
      });
    }

    TextView.prototype.createDisplayObject = function() {
      this.display_object = new PIXI.Text(this.entity.toString(), this.text_format);
      this.display_object.anchor.x = this.text_anchor.x;
      this.display_object.anchor.y = this.text_anchor.y;
      this.display_object.position.x = this.text_position.x;
      this.display_object.position.y = this.text_position.y;
      this.entity.emit('view/display_object_created');
      return this.display_object;
    };

    TextView.prototype.update = function() {
      var ref;
      return (ref = this.display_object) != null ? ref.text = this.entity.toString() : void 0;
    };

    return TextView;

  })(View);

}).call(this);
