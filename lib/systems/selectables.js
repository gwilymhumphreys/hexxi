// Generated by CoffeeScript 1.9.3
(function() {
  var Selectables, System,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  System = require('./system');

  module.exports = Selectables = (function(superClass) {
    extend(Selectables, superClass);

    function Selectables() {
      this.canSelect = bind(this.canSelect, this);
      this.deselect = bind(this.deselect, this);
      this.select = bind(this.select, this);
      this.toggle = bind(this.toggle, this);
      this.onEntityCreated = bind(this.onEntityCreated, this);
      return Selectables.__super__.constructor.apply(this, arguments);
    }

    Selectables.prototype._name = 'selectables';

    Selectables.prototype.onEntityCreated = function(entity) {
      if (!entity.hasComponent('selectable')) {
        return;
      }
      return entity.selectable.selected = false;
    };

    Selectables.prototype.toggle = function(entity) {
      var new_target;
      if (this.selected_entity) {
        new_target = !this.selected_entity.equals(entity);
        this.deselect(this.selected_entity);
      } else {
        new_target = true;
      }
      if (new_target) {
        return this.select(entity);
      }
    };

    Selectables.prototype.select = function(entity) {
      var ref;
      if (!((ref = this.selected_entity) != null ? ref.equals(entity) : void 0)) {
        this.deselect(this.selected_entity);
        this.selected_entity = entity;
        entity.selectable.selected = true;
        return entity.emit('selectable/select', entity);
      }
    };

    Selectables.prototype.deselect = function(entity) {
      if (!entity) {
        return;
      }
      this.selected_entity = null;
      entity.selectable.selected = false;
      return entity.emit('selectable/deselect', entity);
    };

    Selectables.prototype.canSelect = function(entity) {
      return entity.getComponent('selectable') && this.engine.getSystem('teams').isAlly(entity);
    };

    return Selectables;

  })(System);

}).call(this);
