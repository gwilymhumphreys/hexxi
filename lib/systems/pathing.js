// Generated by CoffeeScript 1.9.3
(function() {
  var Path, Pathing, System, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  System = require('./system');

  Path = require('../lib/path');

  module.exports = Pathing = (function(superClass) {
    extend(Pathing, superClass);

    function Pathing() {
      this.showPath = bind(this.showPath, this);
      this.hidePath = bind(this.hidePath, this);
      this.pathEnd = bind(this.pathEnd, this);
      this.pathStart = bind(this.pathStart, this);
      this.onTileHover = bind(this.onTileHover, this);
      this.onTileClick = bind(this.onTileClick, this);
      this.onEntityDeselected = bind(this.onEntityDeselected, this);
      this.onEntitySelected = bind(this.onEntitySelected, this);
      this.onEntityDestroyed = bind(this.onEntityDestroyed, this);
      this.onEntityCreated = bind(this.onEntityCreated, this);
      this.init = bind(this.init, this);
      return Pathing.__super__.constructor.apply(this, arguments);
    }

    Pathing.prototype._name = 'pathing';

    Pathing.prototype.init = function() {
      Pathing.__super__.init.apply(this, arguments);
      return this.pathing = false;
    };

    Pathing.prototype.onEntityCreated = function(entity) {
      if (!entity.hasComponent('pathable')) {
        return;
      }
      Pathing.__super__.onEntityCreated.apply(this, arguments);
      entity.on('selectable/select', this.onEntitySelected);
      return entity.on('selectable/deselect', this.onEntityDeselected);
    };

    Pathing.prototype.onEntityDestroyed = function(entity) {
      Pathing.__super__.onEntityDestroyed.apply(this, arguments);
      return entity.off('selectable/select', this.onEntitySelected);
    };

    Pathing.prototype.onEntitySelected = function(entity) {
      if (this.pathing) {
        this.pathEnd(entity);
      }
      return this.pathStart(entity);
    };

    Pathing.prototype.onEntityDeselected = function(entity) {
      return this.pathEnd(entity);
    };

    Pathing.prototype.onTileClick = function(entity, event) {
      if (this.pathing) {
        return this.pathEnd(entity);
      }
    };

    Pathing.prototype.onTileHover = function(entity, event) {
      var path_finder;
      if (!this.pathing) {
        return;
      }
      this.hidePath();
      path_finder = new Path(this.map);
      this.path = path_finder.findPath(this.current.hex_position, entity.hex_position);
      return this.showPath();
    };

    Pathing.prototype.pathStart = function(entity) {
      var e, i, len, pos, positions, ref;
      this.map_entities = this.engine.entitiesByComponent('hex_position');
      positions = [];
      ref = this.map_entities;
      for (i = 0, len = ref.length; i < len; i++) {
        e = ref[i];
        e.on('mouseover', this.onTileHover);
        e.on('click', this.onTileClick);
        pos = _.pick(e.hex_position, 'q', 'r', 'traversable');
        if (this.engine.getSystem('teams').isEnemy(e)) {
          pos.traversable = true;
        }
        positions.push(pos);
      }
      this.map = Path.createMap(positions);
      this.pathing = true;
      this.current = entity;
      return entity.emit('pathable/path_started', entity);
    };

    Pathing.prototype.pathEnd = function(entity) {
      var i, len, ref, tile;
      ref = this.map_entities;
      for (i = 0, len = ref.length; i < len; i++) {
        tile = ref[i];
        tile.off('mouseover', this.onTileHover);
        tile.off('click', this.onTileClick);
      }
      this.hidePath();
      this.pathing = false;
      this.current = null;
      return entity.emit('pathable/path_end', {
        path: this.path
      }, entity);
    };

    Pathing.prototype.hidePath = function() {
      var coords, i, len, ref, results, tile;
      if (this.path) {
        ref = this.path;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          coords = ref[i];
          tile = this.engine.getSystem('hex_grid').getTile(coords);
          results.push(tile.emit('highlight/off', tile));
        }
        return results;
      }
    };

    Pathing.prototype.showPath = function() {
      var coords, i, len, ref, results, tile;
      if (this.path) {
        ref = this.path;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          coords = ref[i];
          tile = this.engine.getSystem('hex_grid').getTile(coords);
          results.push(tile.emit('highlight/on', tile));
        }
        return results;
      }
    };

    return Pathing;

  })(System);

}).call(this);
